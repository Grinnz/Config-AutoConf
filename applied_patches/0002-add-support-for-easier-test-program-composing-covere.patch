From 9c9f414035a68e2d5ab3d970298765aa26d6138f Mon Sep 17 00:00:00 2001
From: Jens Rehsack <sno@NetBSD.org>
Date: Tue, 15 Nov 2011 12:19:30 +0100
Subject: [PATCH 2/8] add support for easier test program composing (covered
 by header test)

---
 lib/Config/AutoConf.pm |  116 +++++++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 109 insertions(+), 7 deletions(-)

diff --git a/lib/Config/AutoConf.pm b/lib/Config/AutoConf.pm
index 0f76794..3220661 100644
--- a/lib/Config/AutoConf.pm
+++ b/lib/Config/AutoConf.pm
@@ -278,6 +278,84 @@ sub define_var {
   return;
 }
 
+=head2 push_lang(lang [, implementor ])
+
+Puts the current used language on the stack and uses specified language
+for subsequent operations until ending pop_lang call.
+
+=cut
+
+sub push_lang {
+  my $self = shift->_get_instance();
+
+  push @{$self->{lang_stack}}, [ $self->{lang} ];
+
+  return $self->_set_language( @_ );
+}
+
+=head2 pop_lang([ lang ])
+
+Pops the currently used language from the stack and restores previously used
+language. If I<lang> specified, it's asserted that the current used language
+equals to specified language (helps finding control flow bugs).
+
+=cut
+
+sub pop_lang {
+  my $self = shift->_get_instance();
+
+  scalar( @{$self->{lang_stack}} ) > 0 or croak( "Language stack empty" );
+  defined( $_[0] ) and $self->{lang} ne $_[0] and
+    croak( "pop_lang( $_[0] ) doesn't match language in use (" . $self->{lang} . ")" );
+
+  return $self->_set_language( @{ pop @{ $self->{lang} } } );
+}
+
+=head2 lang_build_program( prologue, body )
+
+Builds program for current chosen language. If no prologue is given
+(I<undef>), the default headers are used. If body is missing, default
+body is used.
+
+Typical call of
+
+  Config::AutoConf->lang_build_program( "const char hw[] = \"Hello, World\\n\";",
+                                        "fputs (hw, stdout);" )
+
+will create
+
+  const char hw[] = "Hello, World\n";
+
+  /* Override any gcc2 internal prototype to avoid an error.  */
+  #ifdef __cplusplus
+  extern "C"
+  #endif
+
+  int
+  main (int argc, char **argv)
+  {
+    (void)argc;
+    (void)argv;
+    fputs (hw, stdout);;
+    return 0;
+  }
+=cut
+
+sub lang_build_program {
+  my $self = shift->_get_instance();
+  my ($prologue, $body) = @_;
+
+  defined( $prologue ) or $prologue = $self->_default_includes();
+  defined( $body ) or $body = "";
+  $body = $self->_build_main( $body );
+
+  my $conftest  = $self->_fill_defines();
+     $conftest .= "\n$prologue\n";
+     $conftest .= "\n$body\n";
+
+  return $conftest;
+}
+
 =head2 compile_if_else( $src [, action-if-true [, action-if-false ] ] )
 
 This function trys to compile specified code and runs action-if-true on success
@@ -440,14 +518,13 @@ sub check_header {
   my $cache_name = $self->_cache_name( $header );
   my $check_sub = sub {
   
-    my $conftest  = $self->_fill_defines();
-       $conftest .= $self->_default_includes();
+    my $prologue  = "";
     defined $pre_inc
-      and $conftest .= "$pre_inc\n";
-       $conftest .= <<"_ACEOF";
+      and $prologue .= "$pre_inc\n";
+       $prologue .= <<"_ACEOF";
     #include <$header>
 _ACEOF
-       $conftest .= $self->_default_main();
+    my $conftest = $self->lang_build_program( $prologue, "" );
 
     my $have_header = $self->compile_if_else( $conftest );
     $self->define_var( _have_header_define_name( $header ), $have_header ? $have_header : undef, "defined when $header is available" );
@@ -609,6 +686,24 @@ sub _get_builder {
   return $self->{lang_supported}->{ $self->{lang} }->new( quiet => 1 );
 }
 
+sub _set_language {
+  my $self = shift->_get_instance();
+  my ($lang, $impl) = @_;
+
+  defined( $lang ) or croak( "Missing language" );
+
+  defined( $impl ) and defined( $self->{lang_supported}->{$lang} )
+    and $impl ne $self->{lang_supported}->{$lang}
+    and croak( "Language implementor ($impl) doesn't match exisiting one (" . $self->{lang_supported}->{$lang} . ")" );
+
+  defined( $impl ) and !defined( $self->{lang_supported}->{$lang} )
+    and $self->{lang_supported}->{$lang} = $impl;
+
+  defined( $self->{lang_supported}->{$lang} ) or croak( "Unsupported language \"$lang\"" );
+
+  $self->{lang} = $lang;
+}
+
 sub _fill_defines {
   my ($self, $src, $action_if_true, $action_if_false) = @_;
   ref $self or $self = $self->_get_instance();
@@ -668,8 +763,14 @@ _ACEOF
 }
 
 sub _default_main {
-  my $conftest .= <<"_ACEOF";
+  return $_[0]->_build_main("");
+}
 
+sub _build_main {
+  my $self = shift->_get_instance();
+  my $body = shift || "";
+
+  my $conftest .= <<"_ACEOF";
   /* Override any gcc2 internal prototype to avoid an error.  */
   #ifdef __cplusplus
   extern "C"
@@ -680,8 +781,9 @@ sub _default_main {
   {
     (void)argc;
     (void)argv;
+    $body;
     return 0;
-  }    
+  }
 _ACEOF
 
   return $conftest;
-- 
1.7.7.2

