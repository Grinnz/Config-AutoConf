From cad8e85bd71e3185e0bdb76f729aa5bb54b4051c Mon Sep 17 00:00:00 2001
From: Jens Rehsack <sno@NetBSD.org>
Date: Fri, 27 Jan 2012 15:09:14 +0100
Subject: [PATCH 3/5] add compute_int() and fix bsearch in
 _compute_int_compile()

---
 Changes                |    1 +
 lib/Config/AutoConf.pm |   54 +++++++++++++++++++++++++++++++++++++++--------
 t/02.compile.t         |    7 ++++-
 3 files changed, 50 insertions(+), 12 deletions(-)

diff --git a/Changes b/Changes
index 50e05b5..e686cc5 100644
--- a/Changes
+++ b/Changes
@@ -11,6 +11,7 @@ Revision history for Config-AutoConf
 	 lang_build_bool_test
 	 check_sizeof_type
 	 check_sizeof_types
+	 compute_int
 
 0.17    Jan  4, 2011
         - Re-fixed tests that do not run in <= v5.010
diff --git a/lib/Config/AutoConf.pm b/lib/Config/AutoConf.pm
index efcc634..8b56466 100644
--- a/lib/Config/AutoConf.pm
+++ b/lib/Config/AutoConf.pm
@@ -986,16 +986,16 @@ sub check_types {
 }
 
 sub _compute_int_compile {
-  my ($self, $int, $prologue, @decls) = @_;
+  my ($self, $expr, $prologue, @decls) = @_;
   $self = $self->_get_instance();
 
   my( $body, $conftest, $compile_result );
 
   my ($low, $mid, $high) = (0, 0, 0);
-  if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "($int) >= 0", @decls ) ) ) {
+  if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "((long int)($expr)) >= 0", @decls ) ) ) {
     $low = $mid = 0;
     while( 1 ) {
-      if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "($int) <= $mid", @decls ) ) ) {
+      if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "((long int)($expr)) <= $mid", @decls ) ) ) {
 	$high = $mid;
 	last;
       }
@@ -1008,10 +1008,10 @@ sub _compute_int_compile {
       $mid = $low * 2;
     }
   }
-  elsif( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "($int) < 0", @decls ) ) ) {
+  elsif( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "((long int)($expr)) < 0", @decls ) ) ) {
     $high = $mid = -1;
     while( 1 ) {
-      if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "($int) >= $mid", @decls ) ) ) {
+      if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "((long int)($expr)) >= $mid", @decls ) ) ) {
 	$low = $mid;
 	last;
       }
@@ -1026,17 +1026,51 @@ sub _compute_int_compile {
   }
 
   # perform binary search between $low and $high
-  while( $low != $high ) {
+  while( $low <= $high ) {
     $mid = int( ( $high - $low ) / 2 + $low );
-    if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "($int) <= $mid", @decls ) ) ) {
-      $high = $mid;
+    if( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "((long int)($expr)) < $mid", @decls ) ) ) {
+      $high = $mid - 1;
     }
-    else {
+    elsif( $self->compile_if_else( $self->lang_build_bool_test( $prologue, "((long int)($expr)) > $mid", @decls ) ) ) {
       $low = $mid + 1;
     }
+    else {
+      return $mid;
+    }
   }
 
-  return $low;
+  return;
+}
+
+=head2 compute_int (expression, [action-if-fails], [prologue = default includes], [@decls])
+
+Returns the value of the integer I<expression>. The value should fit in an
+initializer in a C variable of type signed long.  It should be possible
+to evaluate the expression at compile-time. If no includes are specified,
+the default includes are used.
+
+Execute I<action-if-fails> if the value cannot be determined correctly.
+
+=cut
+
+sub compute_int {
+  my ($self, $expr, $action_if_fails, $prologue, @decls) = @_;
+  $self = $self->_get_instance();
+
+  my $cache_name = $self->_cache_type_name( "compute_int", $self->{lang}, $expr );
+  my $check_sub = sub {
+
+    my $val = $self->_compute_int_compile( $expr, $prologue, @decls);
+    unless( defined( $val ) ) {
+      if( defined( $action_if_fails ) and "CODE" eq ref( $action_if_fails ) ) {
+	&{$action_if_fails}();
+      }
+    }
+
+    return $val;
+  };
+
+  return $self->check_cached( $cache_name, "for compute result of ($expr)", $check_sub );
 }
 
 sub _sizeof_type_define_name {
diff --git a/t/02.compile.t b/t/02.compile.t
index b1e6546..3bee9cc 100644
--- a/t/02.compile.t
+++ b/t/02.compile.t
@@ -1,12 +1,12 @@
 # -*- cperl -*-
 
-use Test::More tests => 20;
+use Test::More tests => 21;
 
 use Config::AutoConf;
 
 END {
   -e "config.log" and unlink "config.log";
-  # -e "config2.log" and unlink "config2.log";
+  -e "config2.log" and unlink "config2.log";
   -e "config.h" and unlink "config.h";
 }
 
@@ -62,6 +62,9 @@ ok $typesize, "I32 has size of " . ($typesize ? $typesize : "n/a") . " bytes";
 ok $ac->check_sizeof_types( ["I32", "SV *", "AV *", "HV *", "SV.sv_refcnt" ], undef, undef, $include_perl ),
   "Could determined sizes for I32, SV *, AV *, HV *, SV.sv_refcnt" ;
 
+my $compute = $ac->compute_int( "-sizeof(I32)", undef, $include_perl );
+ok $typesize + $compute == 0, "Compute (-sizeof(I32)";
+
 # check perl data structure members
 ok $ac->check_member( "struct av.sv_any", undef, undef, $include_perl ),
   "have struct av.sv_any member";
-- 
1.7.7.2

